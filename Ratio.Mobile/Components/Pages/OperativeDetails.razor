@page "/operative-detail/{operativeId:int}"

@using Ratio.Mobile.Utilities
@using Ratio.Mobile.Enums
@using Ratio.Application.DTO
@using Ratio.Application.Repositories
@using Ratio.Application.Services


@inject IKillTeamRepository KillTeamRepository
@inject NavigationManager NavigationManager

<div class="container mt-4" style="padding-bottom:80px;">
    <h3>@Operative.Name</h3>

    <hr />

    <!-- Operative Image -->
    <div class="text-center mb-4">
        <img src="@Operative.Image" alt="Operative Image" class="img-fluid rounded" style="max-width: 300px; height: auto;" />
    </div>

    <div class="d-flex justify-content-between bg-light rounded p-2 mb-3">
        <div><strong>M</strong><br>@Operative.Movement</div>
        <div><strong>APL</strong><br>@Operative.ActionPointLimit</div>
        <div><strong>SV</strong><br>@Operative.Save</div>
        <div><strong>W</strong><br>@Operative.Wounds</div>
    </div>

    <!-- Ranged Weapons -->
    <div class="mb-3 text-sm">
        <label class="form-label">Ranged Weapons</label>
        <table class="table table-sm table-bordered mt-2">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>ATK</th>
                    <th>Hit</th>
                    <th>DMG</th>
                    <th>WR</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var weapon in RangedWeapons)
                {
                    <tr>
                        <td>@weapon.Name</td>
                        <td>@weapon.Attacks</td>
                        <td>@weapon.HitThreshold</td>
                        <td>@weapon.NormalDamage / @weapon.CriticalDamage</td>
                        <td>@string.Join(", ", weapon.Traits)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Melee Weapons -->
    <div class="mb-3 text-sm">
        <label class="form-label">Melee Weapons</label>
        <table class="table table-sm table-bordered mt-2">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>ATK</th>
                    <th>Hit</th>
                    <th>DMG</th>
                    <th>WR</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var weapon in MeleeWeapons)
                {
                    <tr>
                        <td>@weapon.Name</td>
                        <td>@weapon.Attacks</td>
                        <td>@weapon.HitThreshold</td>
                        <td>@weapon.NormalDamage / @weapon.CriticalDamage</td>
                        <td>@string.Join(", ", weapon.Traits)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <button class="btn btn-dark w-100" @onclick="GoBack">Back to Library</button>
</div>

@code {
    [Parameter] public int operativeId { get; set; }

    private OperativeDto Operative { get; set; } = new OperativeDto();
    private IEnumerable<WeaponDto> RangedWeapons { get; set; } = new List<WeaponDto>();
    private IEnumerable<WeaponDto> MeleeWeapons { get; set; } = new List<WeaponDto>();


    protected override async void OnInitialized()
    {
        Operative = await KillTeamRepository.GetOperativeByIdAsync(operativeId);

        var weapons = await KillTeamRepository.GetWeaponsByOperativeIdAsync(Operative.Id);
        RangedWeapons = weapons.Where(w => w.Type.ToLower() == WeaponType.Ranged.ToString().ToLower()).ToList();
        MeleeWeapons = weapons.Where(w => w.Type.ToLower() == WeaponType.Melee.ToString().ToLower()).ToList();

        // Get weapon traits
        foreach (var weapon in RangedWeapons)
        {
            var traits = await KillTeamRepository.GetWeaponTraitsByWeaponIdAsync(weapon.Id);
            weapon.Traits = traits.Select(t => $"{t.TraitType} {t.TraitValue}").ToList();
        }

        foreach (var weapon in MeleeWeapons)
        {
            var traits = await KillTeamRepository.GetWeaponTraitsByWeaponIdAsync(weapon.Id);
            weapon.Traits = traits.Select(t => $"{t.TraitType} {t.TraitValue}").ToList();
        }

        StateHasChanged(); // Force refresh if needed
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/library");
    }
}
